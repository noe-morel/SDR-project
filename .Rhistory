library(tidyverse)
library(plotly)
library(shiny)
library(maps)
library(glue)
library(colourpicker)
detail_national = read_delim("barometre-resultats-detail-national.csv")
indicateur <- detail_national |>
select(mesure,indicateur,id_indicateur,unite) |>
distinct(mesure,indicateur,id_indicateur,unite) |>
arrange(id_indicateur)
synthese_departemental <- readr::read_delim("barometre-resultats-synthese-departemental.csv", delim = ",", trim_ws = TRUE, show_col_types = FALSE)
mapdata <- map_data("france")
mapdata$region <- tolower(gsub(' ','-',mapdata$region))
synthese_departemental$libelle_departement <- gsub("ô","o",synthese_departemental$libelle_departement)
synthese_departemental$libelle_departement <- iconv(synthese_departemental$libelle_departement,to="ASCII//TRANSLIT")
synthese_departemental$libelle_departement <- gsub("'","",synthese_departemental$libelle_departement)
synthese_departemental$libelle_departement <- tolower(synthese_departemental$libelle_departement)
synthese_departemental$libelle_departement <- gsub("`","",synthese_departemental$libelle_departement)
synthese_departemental$libelle_departement <- tolower(gsub(' ','-',synthese_departemental$libelle_departement))
selectInput(
"indicateur", label = "Indicateur",
choices = indicateur$id_indicateur, selected = "taux-deploiement-fibre"
)
colourInput("colH", label ="Couleur pour les fortes valeurs", "darkorchid4")
colourInput("colL", label ="Couleur pour les faibles valeurs", "coral1")
fluidRow(renderPlotly({
# create ggplot object
p <-
ggplot(
filter(detail_national, id_indicateur == input$indicateur),
aes(x = date, y = valeur)
) +
geom_line() +
geom_point() +
labs(title="Evolution au niveau national")
# wrap ggplot object with ggplotly
ggplotly(p)
}),
column(8,
renderPlotly({
selected_indicator <- indicateur |>
filter(id_indicateur==input$indicateur)
map2 <- ggplot(left_join(mapdata, filter(synthese_departemental, id_indicateur == input$indicateur), by = c("region" = "libelle_departement")), aes(x=long, y=lat, group=group)) +
geom_polygon(aes(fill=valeur_actuelle),color = "black") +
scale_fill_gradient(name=NULL,low=input$colL,high=input$colH,na.value="gray") +
labs(title = "Synthèse départementale")
ggplotly(map2)
})),
column(4,
renderText({
glue("
Mesure :
{as.character(
indicateur |>
filter(id_indicateur==input$indicateur) |>
select(mesure))}
")
}),
renderText({glue("
Indicateur :
{as.character(
indicateur |>
filter(id_indicateur==input$indicateur) |>
select(indicateur))}
")}),
renderText({glue("
Unité :
{as.character(
indicateur |>
filter(id_indicateur==input$indicateur) |>
select(unite))}
")})
))
?geom_smooth
methods = c("lm", "glm", "gam", "loess","reml")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(plotly)
detail_departemental <- readr::read_delim("barometre-resultats-detail-departemental.csv", delim = ",", trim_ws = TRUE, show_col_types = FALSE)
detail_regional <- readr::read_delim("barometre-resultats-detail-regional.csv", delim = ",", trim_ws = TRUE, show_col_types = FALSE)
detail_national <- readr::read_delim("barometre-resultats-detail-national.csv", delim = ",", trim_ws = TRUE, show_col_types = FALSE)
synthese_departemental <- readr::read_delim("barometre-resultats-synthese-departemental.csv", delim = ",", trim_ws = TRUE, show_col_types = FALSE)
synthese_regional <- readr::read_delim("barometre-resultats-synthese-regional.csv", delim = ",", trim_ws = TRUE, show_col_types = FALSE)
synthese_national <- readr::read_delim("barometre-resultats-synthese-national.csv", delim = ",", trim_ws = TRUE, show_col_types = FALSE)
reg_dep <- readr::read_delim("departements-france.csv", delim = ",", trim_ws = TRUE, show_col_types = FALSE)
reg_dep$nom_departement <- gsub("ô","o",reg_dep$nom_departement)
reg_dep$nom_departement <- iconv(reg_dep$nom_departement,to="ASCII//TRANSLIT")
reg_dep$nom_departement <- gsub("'","",reg_dep$nom_departement)
reg_dep$nom_departement <- gsub("`","",reg_dep$nom_departement)
reg_dep$nom_departement <- tolower(reg_dep$nom_departement)
reg_dep$nom_departement <- tolower(gsub(' ','-',reg_dep$nom_departement))
reg_dep$nom_region <- gsub("ô","o",reg_dep$nom_region)
reg_dep$nom_region <- iconv(reg_dep$nom_region,to="ASCII//TRANSLIT")
reg_dep$nom_region <- gsub("'","",reg_dep$nom_region)
reg_dep$nom_region <- gsub("`","",reg_dep$nom_region)
reg_dep$nom_region <- tolower(reg_dep$nom_region)
reg_dep$nom_region <- tolower(gsub(' ','-',reg_dep$nom_region))
mapdata <- map_data("france")
mapdata$region <- tolower(gsub(' ','-',mapdata$region))
synthese_departemental$libelle_departement <- gsub("ô","o",synthese_departemental$libelle_departement)
synthese_departemental$libelle_departement <- iconv(synthese_departemental$libelle_departement,to="ASCII//TRANSLIT")
synthese_departemental$libelle_departement <- gsub("'","",synthese_departemental$libelle_departement)
synthese_departemental$libelle_departement <- gsub("`","",synthese_departemental$libelle_departement)
synthese_departemental$libelle_departement <- tolower(synthese_departemental$libelle_departement)
synthese_departemental$libelle_departement <- tolower(gsub(' ','-',synthese_departemental$libelle_departement))
detail_departemental$libelle_departement <- iconv(detail_departemental$libelle_departement,to="ASCII//TRANSLIT")
detail_departemental$libelle_departement <- gsub("'","",detail_departemental$libelle_departement)
detail_departemental$libelle_departement <- tolower(detail_departemental$libelle_departement)
detail_departemental$libelle_departement <- tolower(gsub(' ','-',detail_departemental$libelle_departement))
synthese_regional$libelle_region <- gsub("ô","o",synthese_regional$libelle_region)
synthese_regional$libelle_region <- iconv(synthese_regional$libelle_region,to="ASCII//TRANSLIT")
synthese_regional$libelle_region <- gsub("'","",synthese_regional$libelle_region)
synthese_regional$libelle_region <- gsub("`","",synthese_regional$libelle_region)
synthese_regional$libelle_region <- tolower(synthese_regional$libelle_region)
synthese_regional$libelle_region <- tolower(gsub(' ','-',synthese_regional$libelle_region))
UnJeuneNational <- detail_national |>
filter(mesure=="Plan 1 jeune 1 solution") |>
mutate(recrutés_par_mois = if_else(valeur>lag(valeur), valeur-lag(valeur), valeur, missing=valeur))|>
rename(recrutés_cumulés = valeur) |>
pivot_longer(c(recrutés_cumulés, recrutés_par_mois), names_to = "type", values_to = "valeur") |>
mutate(year = year(date)) |>
ggplot() +
geom_line(mapping=aes(x=date, y=valeur, fg=type)) +
labs(title = "Jeunes recrutés grâce au projet",
x = "Date",
y = "Nombre de recrutement",
fg="")
plotly::ggplotly(UnJeuneNational)
UnJeuneNational <- detail_regional |>
filter(mesure=="Plan 1 jeune 1 solution" & month(date)==7) |>
mutate(year = year(date)) |>
ggplot() +
geom_col(mapping = aes(x=libelle_region, y=valeur, bg=libelle_region))+
theme(axis.text.x=element_blank(),axis.ticks.x=element_blank(),axis.title.x=element_blank())+
facet_wrap(vars(year), nrow=1)+
labs(title = "Jeunes recrutés grâce au projet par région",
x = "Date",
y = "Nombre de recrutement",
bg="Région")
plotly::ggplotly(UnJeuneNational)
UnJeuneNationalPC <- detail_regional |>
filter(mesure=="Plan 1 jeune 1 solution" & month(date)==7 & code_region!="06") |>
mutate(year = year(date)) |>
mutate(valeur_pc = if_else(year!=2019, 100+(valeur-lag(valeur))/lag(valeur)*100, 100))|>
ggplot() +
geom_col(mapping = aes(x=libelle_region, y=valeur_pc, bg=libelle_region))+
theme(axis.text.x=element_blank(),axis.ticks.x=element_blank(),axis.title.x=element_blank())+
facet_wrap(vars(year), nrow=1)+
labs(title = "Jeunes recrutés grâce au projet par région",
x = "Date",
y = "Nombre de recrutement",
bg="Région")
plotly::ggplotly(UnJeuneNationalPC)
UnJeunePACA <- detail_regional |>
filter(mesure=="Plan 1 jeune 1 solution" & code_region=="93") |>
mutate(valeur_mois = if_else(valeur>lag(valeur), valeur-lag(valeur), valeur, missing=valeur))|>
mutate(year = year(date)) |>
ggplot() +
geom_line(mapping=aes(x=date, y=valeur_mois)) +
labs(title = "Jeunes recrutés grâce au projet en région PACA",
x = "Date",
y = "Nombre de recrutement")
plotly::ggplotly(UnJeunePACA)
test <- detail_departemental |>
filter(month(date)==7 & mesure=="Plan 1 jeune 1 solution")|>
mutate(year = year(date))|>
group_by(year)|>
mutate(moyenne = mean(valeur))
UnJeuneDepPACA <- detail_departemental |>
left_join(reg_dep, by = c("code_departement"="code_departement"))|>
filter(mesure=="Plan 1 jeune 1 solution" & month(date)==7)|>
add_column(moyenne = test$moyenne) |>
filter(code_region=="93")|>
mutate(year = year(date)) |>
ggplot() +
geom_line(mapping=aes(x=year(date), y=valeur, fg = libelle_departement))+
geom_line(mapping = aes(x = year(date), y=moyenne))  +
labs(title = "Jeunes recrutés grâce au projet en PACA par département",
x = "Date",
y = "Nombre de recrutement",
fg="Département")
plotly::ggplotly(UnJeuneDepPACA)
mapReg <- left_join(mapdata, reg_dep, by = c("region" = "nom_departement"))
#selection indicateurs
indD_now_dep <- filter(synthese_departemental, mesure == "Réduire la mortalité sur les routes")
#Join des deux tableaux
mapdataD_now_dep <- left_join(mapdata, indD_now_dep, by = c("region" = "libelle_departement"))
mapD_now_dep <- ggplot(mapdataD_now_dep, aes(x=long, y=lat, group=group)) +
geom_polygon(aes(fill=valeur_actuelle),color = "black") + scale_fill_gradient(name="nombre de morts",low="green",high="red",na.value="gray")+
labs(title = "Mortalité sur les routes en 2022, par département ")
plotly::ggplotly(mapD_now_dep)
mapD_for_dep <- ggplot(mapdataD_now_dep, aes(x=long, y=lat, group=group)) +
geom_polygon(aes(fill=valeur_initiale),color = "black") + scale_fill_gradient(name="nombre de morts",low="green",high="red",na.value="gray")+
labs(title = "Mortalité sur les routes en 2017, par département ")
plotly::ggplotly(mapD_for_dep)
indD_reg <- filter(synthese_regional, mesure == "Réduire la mortalité sur les routes")
regD <- left_join(mapReg, indD_reg, by = c("nom_region" = "libelle_region"))
mapD_now_reg <- ggplot(regD, aes(x=long, y=lat, group=group)) +
geom_polygon(aes(fill=valeur_actuelle),color = "black")+
scale_fill_gradient(name="nombre de morts",low="green",high="red",na.value="gray")+
labs(title = "Mortalité sur les routes en 2022, par région ")
plotly::ggplotly(mapD_now_reg)
mapD_for_reg <- ggplot(regD, aes(x=long, y=lat, group=group)) +
geom_polygon(aes(fill=valeur_initiale),color = "black")+
scale_fill_gradient(name="nombre de morts",low="green",high="red",na.value="gray")+
labs(title = "Mortalité sur les routes en 2017, par région ")
plotly::ggplotly(mapD_for_reg)
indCYC_now_dep <- filter(synthese_departemental, indicateur == "Kilomètres d'aménagements cyclables sécurisés")
#Join des deux tableaux
mapdataCYC_now_dep <- left_join(mapdata, indCYC_now_dep, by = c("region" = "libelle_departement"))
mapCYC_now_dep <- ggplot(mapdataCYC_now_dep, aes(x=long, y=lat, group=group)) +
geom_polygon(aes(fill=valeur_actuelle),color = "black")+
scale_fill_gradient(name="kilomètres",low="brown",high="chartreuse",na.value="gray")+
labs(title = "Km d'aménagement cyclables sécurisés en 2022, par département ")
#mapSDF_now_dep
plotly::ggplotly(mapCYC_now_dep)
mapCYC_for_dep <- ggplot(mapdataCYC_now_dep, aes(x=long, y=lat, group=group)) +
geom_polygon(aes(fill=valeur_initiale),color = "black")+
scale_fill_gradient(name="kilomètres",low="brown",high="chartreuse",na.value="gray")+
labs(title = "Km d'aménagement cyclables sécurisés en 2017, par département")
plotly::ggplotly(mapCYC_for_dep)
indCYC_now_reg <- filter(synthese_regional, indicateur == "Kilomètres d'aménagements cyclables sécurisés")
regCYC_now_reg <- left_join(mapReg, indCYC_now_reg, by = c("nom_region" = "libelle_region"))
mapCYC_now_reg <- ggplot(regCYC_now_reg, aes(x=long, y=lat, group=group)) +
geom_polygon(aes(fill=valeur_actuelle),color = "black")+
scale_fill_gradient(name="kilomètre",low="brown",high="chartreuse",na.value="gray")+
labs(title = "Km d'aménagement cyclables sécurisés en 2022, par région")
plotly::ggplotly(mapCYC_now_reg)
mapCYC_for_reg <- ggplot(regCYC_now_reg, aes(x=long, y=lat, group=group)) +
geom_polygon(aes(fill=valeur_initiale),color = "black")+
scale_fill_gradient(name="kilomètres",low="brown",high="chartreuse",na.value="gray")+
labs(title = "Km d'aménagement cyclables sécurisés en 2017, par région")
plotly::ggplotly(mapCYC_for_reg)
indELEC_now_dep <- filter(synthese_departemental, indicateur == "Nombre de bornes de recharge pour véhicules électriques déployées")
#Join des deux tableaux
mapdataELEC_now_dep <- left_join(mapdata, indELEC_now_dep, by = c("region" = "libelle_departement"))
mapELEC_now_dep <- ggplot(mapdataELEC_now_dep, aes(x=long, y=lat, group=group)) +
geom_polygon(aes(fill=valeur_actuelle),color = "black")+
scale_fill_gradient(name="bornes de recharge",low="darkorange1",high="blue",na.value="gray")+
labs(title = "Bornes de recharge électriques déployées en 2022, par département ")
#mapSDF_now_dep
plotly::ggplotly(mapELEC_now_dep)
mapELEC_for_dep <- ggplot(mapdataELEC_now_dep, aes(x=long, y=lat, group=group)) +
geom_polygon(aes(fill=valeur_initiale),color = "black")+
scale_fill_gradient(name="bornes de recharge",low="darkorange1",high="blue",na.value="gray")+
labs(title = "Bornes de recharge électriques déployées en 2019, par département")
plotly::ggplotly(mapELEC_for_dep)
indELEC_now_reg <- filter(synthese_regional, indicateur == "Nombre de bornes de recharge pour véhicules électriques déployées")
regELEC_now_reg <- left_join(mapReg, indELEC_now_reg, by = c("nom_region" = "libelle_region"))
mapELEC_now_reg <- ggplot(regELEC_now_reg, aes(x=long, y=lat, group=group)) +
geom_polygon(aes(fill=valeur_actuelle),color = "black")+
scale_fill_gradient(name="bornes de recharge",low="darkorange1",high="blue",na.value="gray")+
labs(title = "Bornes de recharge électriques déployées en 2022, par région")
plotly::ggplotly(mapELEC_now_reg)
mapELEC_for_reg <- ggplot(regELEC_now_reg, aes(x=long, y=lat, group=group)) +
geom_polygon(aes(fill=valeur_initiale),color = "black")+
scale_fill_gradient(name="bornes de recharge",low="darkorange1",high="blue",na.value="gray")+
labs(title = "Bornes de recharge électriques déployées en 2019, par région")
plotly::ggplotly(mapELEC_for_reg)
indSDF_now_dep <- filter(synthese_departemental, indicateur == "Nombre de personnes sans-abri ou en hébergement ayant obtenu un logement social")
#Join des deux tableaux
mapdataSDF_now_dep <- left_join(mapdata, indSDF_now_dep, by = c("region" = "libelle_departement"))
mapSDF_now_dep <- ggplot(mapdataSDF_now_dep, aes(x=long, y=lat, group=group)) +
geom_polygon(aes(fill=valeur_actuelle),color = "black")+
scale_fill_gradient(name="personnes dans l'année",low="cadetblue1",high="orangered",na.value="gray")+
labs(title = "Sans-abri obtenant un logement social en 2022, par département")
#mapSDF_now_dep
plotly::ggplotly(mapSDF_now_dep)
mapSDF_for_dep <- ggplot(mapdataSDF_now_dep, aes(x=long, y=lat, group=group)) +
geom_polygon(aes(fill=valeur_initiale),color = "black")+
scale_fill_gradient(name="personnes dans l'année",low="cadetblue1",high="orangered",na.value="gray")+
labs(title = "Sans-abri obtenant un logement social en 2021, par département")
plotly::ggplotly(mapSDF_for_dep)
indSDF_now_reg <- filter(synthese_regional, indicateur == "Nombre de personnes sans-abri ou en hébergement ayant obtenu un logement social")
regSDF_now_reg <- left_join(mapReg, indSDF_now_reg, by = c("nom_region" = "libelle_region"))
mapSDF_now_reg <- ggplot(regSDF_now_reg, aes(x=long, y=lat, group=group)) +
geom_polygon(aes(fill=valeur_actuelle),color = "black")+
scale_fill_gradient(name="personnes dans l'année",low="cadetblue1",high="orangered",na.value="gray")+
labs(title = "Sans-abri obtenant un logement social en 2022, par région")
plotly::ggplotly(mapSDF_now_reg)
mapSDF_for_reg <- ggplot(regSDF_now_reg, aes(x=long, y=lat, group=group)) +
geom_polygon(aes(fill=valeur_initiale),color = "black")+
scale_fill_gradient(name="personnes dans l'année",low="cadetblue1",high="orangered",na.value="gray")+labs(title = "Sans-abri obtenant un logement social en 2021, par région")
plotly::ggplotly(mapSDF_for_reg)
setwd("~/SDR-project")
